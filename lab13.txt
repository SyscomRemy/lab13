CRlab13
________________________________________________________________________________________________________________________________________________________________________________________________________

1. git clone https://github.com/CircuitCo/BeagleBone

Le bouton swith permet de changer de mode pour booter, si l'on veut booter à partir d'une carte SD il faut maintenir le bouton switch pendant la réalimentation de la carte.

A switch is provided to allow switching between the modes.
- Holding the boot switch down during a removal and reapplication of power
without a microSD card inserted will force the boot source to be the USB port and if nothing is detected on the USB client port, it will go to the serial port for download.
- Without holding the switch, the board will boot try to boot from the eMMC. If it is empty, then it will try booting from the microSD slot, followed by the serial port, and then the USB port.
- If you hold the boot switch down during the removal and reapplication of power to the board, and you have a microSD card inserted with a bootable image, the board will boot from the microSD card.

- dans la datasheet, le canal d'interruption du Timer0 est le 66 .
( aller dans la section 6-interrupts : ARM Cortex-A8 interrupts et chercher Timer0 )

6. ls -l /dev/ttyUSB0 nous vérifions que seul les utilisateurs root et le groupe dialout ont un accès en lecture et écriture au fichier ttyUSB0 nous devons donc nous ajouter au groupe dialout

commande pour s'ajouter: sudo adduser $USER dialout (La variable d'envirionnement user à été initialisée auparavant avec student)

7. Lancement de la communication série avec l'USB: 

	picocom -b 115200 /dev/ttyUSB0
	
Après les étapes mentionnées nous vérifions que la date de compilation de notre U-boot cooresponds bien à celle que nous avons réaliser au lab12
Loading Environment from MMC... OK (chargement du bootloader via la MMC et non la EMMC qui est la mémoire embarquée sur la carte donc c'est bon on a booter avec notre bootloader stocké dans la sd)

8. reset de la carte pour que ça marche
   affiche: BARDIAU_ITOUDJ-uboot=>

9. 
	BARDIAU_ITOUDJ-uboot=> help saveenv
	saveenv - save environment variables to persistent storage

	Usage:
	saveenv permet de sauvegarder les modifications apporter dans l'environnement uboot donc dans le BIOS de la carte 

10. 
	BARDIAU_ITOUDJ-uboot=> env default -f -a (efface toutes les variables d'environnement de uboot)
	## Resetting to default environment
	BARDIAU_ITOUDJ-uboot=> saveenv
	Saving Environment to MMC... Writing to redundant MMC(1)... OK

11.Configuration du réseau sur la carte cible Beagle Board

	BARDIAU_ITOUDJ-uboot=> setenv ipaddr 192.168.0.100 (adresse ip de la carte)
	BARDIAU_ITOUDJ-uboot=> setenv serverip 192.168.0.1 (adresse ip du server)
	BARDIAU_ITOUDJ-uboot=> setenv ethaddr 12:34:56:ab:cd:ef (adresse ethernet)
	BARDIAU_ITOUDJ-uboot=> setenv autostart no

12.

	BARDIAU_ITOUDJ-uboot=> saveenv
	Saving Environment to MMC... Writing to MMC(1)... OK

13-14-15.

	ifconfig -a
	ens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.25.132  netmask 255.255.255.0  broadcast 192.168.25.255
        inet6 fe80::431c:f262:7eed:281b  prefixlen 64  scopeid 0x20<link>
        ether 00:0c:29:89:65:7f  txqueuelen 1000  (Ethernet)
        RX packets 1464  bytes 1579172 (1.5 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 705  bytes 73585 (73.5 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

enxa0cec8300217: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet6 fe80::3412:5420:4aa2:cf05  prefixlen 64  scopeid 0x20<link>
        ether a0:ce:c8:30:02:17  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 17  bytes 2832 (2.8 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 816  bytes 62987 (62.9 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 816  bytes 62987 (62.9 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

- on en déduit que : 

ether a0:ce:c8:30:02:17  txqueuelen 1000  (Ethernet) - USB ethernet (C'est notre câble pour la carte)

ether 00:0c:29:89:65:7f  txqueuelen 1000  (Ethernet) - PCI ethernet (C'est le cable pour internet)

16. dans notre cas, le nom de l'interface est : ens33 (configuration de l'adresse IP de l'hote via le PC)

aller dans wire settings, chercher paramètres USB ethernet  -> aller dans IPv4 -> sélectionner MANUAL -> adress 92.168.0.1 -> Net mask : 255.255.255.0


17. sudo /etc/init.d/networking restart


18. Test de la connexion réseau
a. sudo apt install tftpd-hpa (installation d'un serveur TFTP pour communiquer entre l'hote et la carte sans branchement)
b. vim /var/lib/tftpboot/toto.txt 
   tftp /var/lib/tftpboot

19. md 0x81000000 (on remarque qu'une petite partie de la mémoire à été réservée pour stocker le fichier)




